{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\react-1\\\\LoveApp\\\\loveapp\\\\src\\\\Components\\\\BackgroundHeart.js\";\nimport React from \"react\";\nimport \"./BackgroundHeart.css\";\nlet hearts = [{\n  url: require(\"../image/1.png\").default\n}, {\n  url: require(\"../image/2.png\").default\n}, {\n  url: require(\"../image/3.png\").default\n}];\n\nclass BackgroundHeart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: []\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 500);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  tick() {\n    var random = Math.floor(Math.random() * 10) % 3;\n    var left = Math.floor(Math.random() * 97);\n    var width = Math.floor(Math.random() * 10) + 35;\n    if (random === 2) width -= 15;\n    var mystyle = {\n      left: left + \"%\",\n      width: width + \"px\"\n    };\n    var myObject = {\n      // index: this.state.list? (this.state.list.length) : 0,\n      url: hearts[random].url,\n      style: mystyle\n    };\n\n    if (this.state.list.length < 80) {\n      this.setState({\n        list: this.state.list.concat(myObject)\n      });\n    }\n  }\n\n  render() {\n    const lists = this.state.list.map(function (l, index) {\n      return /*#__PURE__*/_jsxDEV(\"img\", {\n        src: l.url,\n        className: \"Heart\",\n        alt: \"Heart\",\n        style: l.style\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: lists\n    }, void 0, false);\n  }\n\n}\n\nexport default BackgroundHeart;","map":{"version":3,"sources":["C:/Users/DELL/Desktop/react-1/LoveApp/loveapp/src/Components/BackgroundHeart.js"],"names":["React","hearts","url","require","default","BackgroundHeart","Component","constructor","props","state","list","componentDidMount","intervalID","setInterval","tick","componentWillUnmount","clearInterval","random","Math","floor","left","width","mystyle","myObject","style","length","setState","concat","render","lists","map","l","index"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AAEA,IAAIC,MAAM,GAAG,CACX;AAAEC,EAAAA,GAAG,EAAEC,OAAO,CAAC,gBAAD,CAAP,CAA0BC;AAAjC,CADW,EAEX;AAAEF,EAAAA,GAAG,EAAEC,OAAO,CAAC,gBAAD,CAAP,CAA0BC;AAAjC,CAFW,EAGX;AAAEF,EAAAA,GAAG,EAAEC,OAAO,CAAC,gBAAD,CAAP,CAA0BC;AAAjC,CAHW,CAAb;;AAMA,MAAMC,eAAN,SAA8BL,KAAK,CAACM,SAApC,CAA8C;AAC5CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AACDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM,KAAKC,IAAL,EAAP,EAAoB,GAApB,CAA7B;AACD;;AAEDC,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKJ,UAAN,CAAb;AACD;;AAEDE,EAAAA,IAAI,GAAG;AACL,QAAIG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,EAA3B,IAAiC,CAA9C;AACA,QAAIG,IAAI,GAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,EAA3B,CAAX;AACA,QAAII,KAAK,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,EAA3B,IAAiC,EAA7C;AACA,QAAIA,MAAM,KAAK,CAAf,EAAkBI,KAAK,IAAI,EAAT;AAClB,QAAIC,OAAO,GAAG;AACZF,MAAAA,IAAI,EAAEA,IAAI,GAAG,GADD;AAEZC,MAAAA,KAAK,EAAEA,KAAK,GAAG;AAFH,KAAd;AAIA,QAAIE,QAAQ,GAAG;AACb;AACArB,MAAAA,GAAG,EAAED,MAAM,CAACgB,MAAD,CAAN,CAAef,GAFP;AAGbsB,MAAAA,KAAK,EAAEF;AAHM,KAAf;;AAMA,QAAI,KAAKb,KAAL,CAAWC,IAAX,CAAgBe,MAAhB,GAAyB,EAA7B,EAAiC;AAC/B,WAAKC,QAAL,CAAc;AACZhB,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IAAX,CAAgBiB,MAAhB,CAAuBJ,QAAvB;AADM,OAAd;AAGD;AACF;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAMC,KAAK,GAAG,KAAKpB,KAAL,CAAWC,IAAX,CAAgBoB,GAAhB,CAAoB,UAAUC,CAAV,EAAaC,KAAb,EAAoB;AACpD,0BACE;AACE,QAAA,GAAG,EAAED,CAAC,CAAC7B,GADT;AAEE,QAAA,SAAS,EAAC,OAFZ;AAGE,QAAA,GAAG,EAAC,OAHN;AAKE,QAAA,KAAK,EAAE6B,CAAC,CAACP;AALX,SAIOQ,KAJP;AAAA;AAAA;AAAA;AAAA,cADF;AASD,KAVa,CAAd;AAWA,wBAAO;AAAA,gBAAGH;AAAH,qBAAP;AACD;;AAlD2C;;AAqD9C,eAAexB,eAAf","sourcesContent":["import React from \"react\";\r\nimport \"./BackgroundHeart.css\";\r\n\r\nlet hearts = [\r\n  { url: require(\"../image/1.png\").default },\r\n  { url: require(\"../image/2.png\").default },\r\n  { url: require(\"../image/3.png\").default },\r\n];\r\n\r\nclass BackgroundHeart extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      list: [],\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.intervalID = setInterval(() => this.tick(), 500);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.intervalID);\r\n  }\r\n\r\n  tick() {\r\n    var random = Math.floor(Math.random() * 10) % 3;\r\n    var left = Math.floor(Math.random() * 97);\r\n    var width = Math.floor(Math.random() * 10) + 35;\r\n    if (random === 2) width -= 15;\r\n    var mystyle = {\r\n      left: left + \"%\",\r\n      width: width + \"px\",\r\n    };\r\n    var myObject = {\r\n      // index: this.state.list? (this.state.list.length) : 0,\r\n      url: hearts[random].url,\r\n      style: mystyle,\r\n    };\r\n\r\n    if (this.state.list.length < 80) {\r\n      this.setState({\r\n        list: this.state.list.concat(myObject),\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const lists = this.state.list.map(function (l, index) {\r\n      return (\r\n        <img\r\n          src={l.url}\r\n          className=\"Heart\"\r\n          alt=\"Heart\"\r\n          key={index}\r\n          style={l.style}\r\n        />\r\n      );\r\n    });\r\n    return <>{lists}</>;\r\n  }\r\n}\r\n\r\nexport default BackgroundHeart;\r\n"]},"metadata":{},"sourceType":"module"}